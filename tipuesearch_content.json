{"pages":[{"tags":"pages","title":"About","url":"https://steviepoppe.net/about/","text":"#About me Hello! I'm Stevie, a Belgian student at the University of Leuven. This page serves as a brief biographical introduction, as well as explaining the aims of this blog. Having formerly attained a BA in Applied Informatics, 1 I'm currently pursuing a degree in Japanology at the University of Leuven; a radical switch, but one through which I'm able to combine both my strong interest in humanities as in the country of Japan. Growing up in a poor Antwerp neighbourhood as the only kid at school of a supposed Belgian origin, and later onwards as a technical school (TSO) student, I have seen, and been confronted with, all kinds of discrimination. This has led me to an interest in (and questioning of) the notion of national identity and nationalism itself, as well as more broadly, an interest in the fields of sociology and politics. That aside, I've become particularly drawn to Digital Humanities, a domain that feels, through several years of fostering technical skills, right at home as a perfect synthesis of both my former and current studies. On a personal note, I'm fairly passionate about music. I've spent the better part of my life taking piano classes or playing in bands, and despite an ever shrinking lack of free time, enjoy spending most of it on composing. #About this blog I designed and built this blog from scratch using the lightweight, python-based Pelican as framework, and host my pages on GitHub's free web hosting service GitHub Pages . Since my workflow involves writing most of my content in markdown anyway, Pelican turns out to be both a good fit, and way for me to maintain my webdesign skills. This blog serves simultaneously as a kind of portfolio, a place for technical experimentation, and as an outlet for random musings on personal subjects (usually on languages, Japan or my studies in general, although hopefully I'll get to occasionally plug whatever music I'm working on as well!). That aside, I hope I'll be able to provide some assistence to my fellow students (or anyone interested) on technical aspects related to the academic studies, or on Japanese Studies and the Japanese language in general."},{"tags":"pages","title":"Resources","url":"https://steviepoppe.net/resources/","text":"This page contains links and files that have proven to be particularly useful for myself and might be of use for those with similar interests. I'll update this spot as I encounter more tools or pages I feel are worthy of mention. Useful Links General Anki : Free, opensource, multiplatform (smartphones included) flashcard application with powerful SRS 1 algorithm. Especially vital for language acquisition and probably the single most important tool for efficient memorisation. Feedly : My RSS reader of choice. Free, intuitive interface, supports all the major platforms and browsers, and syncs your articles. A must have if you're following several blogs or newspapers on a daily basis. Feel free to add me on your feed. Language Japanese Rikaisama : a Firefox 2 extension on Rikaichan , a pop-up dictionary and a digital minded Japanese learner's best friend. Rikaisama allows additional audio playback anki integration. I've written a blog on how to do this. Animelon : for all you ‘learn Japanese through Anime' kids out there! Reminiscent of the classic Erin's Challenge videos: watch various popular anime with japanese subtitles in kanji/kana/romaji and a script with integrated dictionary as sidebar. Perfect in combination with rikaisama as well. Waran Jiten : a Japanese-Dutch dictionary courtesy of Leuven University. Has a dutch rikai addon. Tangorin : my favorite online Japanese dictionary, has an excellent Kanji dictionary as well. Sourceforge : contains a wide variety of software developed by fellow Japanese learners. Some, such as Jnovelformatter , Japanese Text Analysis Tool or OCR Manga Reader are particularly noteworthy, others not so much. KULeuven Japanology : the Leuven University Japanology homepage. Sanskrit spokensanskrit : the only decent online Sanskrit dictionary out there. Lexilogos : multilingual web keyboard that beats learning to type devanagari on a latin-script keyboard. Files Anki I use Anki to complement my other study methods for nearly all my classes. These are a bunch of ankisets I made I feel are stand-alone enough to be useful to new students of these classes as well. Inleiding tot de Europese Literatuur na 1750 Download : Europese Literatuur A full set to accompany the textbook ‘ Literaire Verbeelding 2 ‘ 3 : contains important dates and summaries of all artists and their discussed works (in Dutch), sorted by period (from Romanticism till Postmodernism). Kanji 2 Download : Kanji 2 Kanji Vocab 2 Two sets on the compulsory kanji and vocabulary for kanji/goi classes in the 2nd year of Japanology, as seen in our handbook 4 lessons 1 - 20. They're tagged by chapter and contain respectively strokeorder, radicals, definitions, and different readings for the Kanji set, and example sentences in cloze deletion 5 for vocab, both in recognition and reproduction form. They use the KanjiStrokeOrders 6 font and display hidden hiragana on touch/hover. I recommend doing these on a handheld device to practice writing and stroke order using the touchscreen. Spaced Repetition System : a method of studying optimally by repeating items over gradually increasing periods. Cards are calculated to appear shortly before the item slips one's mind. ↩ Chrome users can use Rikaikun instead. ↩ Ghesquiere, R. 2006. Literaire verbeelding 2: een geschiedenis van de Europese literatuur en cultuur vanaf 1750. Leuven: Acco ↩ Japanese for International/Graduate Students vol.5: Kanji and Vocabulary （稲村真理子. 2007. 大学・大学院留学生の日本語. 5(漢字・語彙編) 5(漢字・語彙編). 東京: アルク） ↩ cloze deletion test : an exercise in which one fills in portions of the text left blank, based on the context of the text. ↩ Available for free under a BSD style license at http://www.nihilist.org.uk/ . ↩"},{"tags":"Studies","title":"A Quick Guide on Using Anki (effectively) (in an academic context)","url":"https://steviepoppe.net/blog/2016/09/a-quick-guide-on-using-anki-effectively-in-an-academic-context/","text":"Those who know me might accuse me of preaching the memorization tool Anki as the best thing that's ever happened to studying, and they wouldn't be that far off. Over the past year I've extensively integrated this software in my studies, with (to me personally) remarkable results in both productivity and academic grades. There are however, some pitfalls for the casual user to take heed of, and getting the full benefit of your time requires cultivating a proper mindset. As I mention Anki a great deal on this site, I decided on writing my own short guide on setting up and using Anki, as well as describe how I personally integrate it into my studies. Anyone with an interest in studying Japanese will surely already have heard of Anki. It's covered extensively on all the major learning resources online, and the canonical self learner's beginner path seems to be Heisig's Kanji method , Tae Kim's online Grammar Guide and Core 2K/6K/10K 1 , all three heavily relying on Anki. Language acquisition certainly remains Anki's most popular usage, but lately, the software's become broad enough to find it's way in various other branches (it's become an integrated routine for medical students, for example, as well as math students thanks to LaTeX support). So far this sounds like I'm paid to advertise Anki. Except the software's free and open source , and if you don't like synchronizing your anki progress over Anki's servers you could even set that up on your own as well 2 . What is Anki? Why is Anki?! How is Anki?!? To recap: Anki is an extremely customizable application designed for memorization, available for free on nearly all the major platforms 3 as well as being accessable online. Being able to study on the road (I commute by train, taking me up to 3 hours total traveling time every day) and synchronizing your progress at home is a major boon on using your time practically. There are plenty of studies on methods for efficient learning, and unsurprisingly, classic late-night cramming, and passive studying methods as extensive marking and rereading of texts don't score very high. On the other hand, *active recall testing* (questioning yourself by actively trying to come up with the answer to a question) and *spaced learning* (spreading information absorption over long periods of time) are concidered key 4 . Anki is an application that achieves both through the means of timed flashcards. The concept is simple: the front of the card asks you a question and the backside displays the answer. After showing the answer, you decide whether you got it wrong or right, and to what degree. This determines when you'll be confronted by this card again. The Guide Setting up! Download & Install Download the application for whatever system you'd like it on Anki's homepage and follow the installer's steps. I highly recommend purchasing a lower-end smartphone if you're still using a brick as cellphone. It's somewhat of a steep investment, but worth it in the long run (not just for Anki but plenty of other learning tools such as dictionaries or OCR tools 5 ). Anki's layout, especially the desktop application, is pretty barebones but functional and self-explanatory enough to get used to in a couple of minutes. Account & Syncing To be able to syncronize your progress over different devices you'll have to register an account at Anki's web service (I definitely encourage doing this regardless: just imagine the horror if your device breaks down after 3 years of having intensively studied flashcards). In your desktop Anki, open Settings → Preferences from the menu, then select the Network tab and insert your user credidentials. From the Anki's main menu, select the syncing icon to try it out. Now do the same on your mobile device. On Ankidroid this is Settings → AnkiDroid → AnkiWeb Account . Make sure the \" Download Media \" option below \" Synchronize \" is tagged! Now try syncing from this device as well. If everything goes well, we'll start with our first set. Creating your first set and cards! It's best to consider Anki's main interface as a container for your decks (also called sets) of flashcards. There's no content yet on a fresh install, aside from a filler deck called Default . Feel free to remove this (set-specific options are available through the icon on the right of each set). There's a lot of premade content on the internet, but in order to get used to the interface and learn some of the base features, we'll create a small set, set up a template for our notes, and create some cards - all by ourselves . Don't worry if the terminology doesn't make sense yet, we'll cover that over this guide. As an example we'll create a deck containing some important dates, events and notables in Japanese history. Start by clicking the Create Deck button in the bottom bar, and name it Japanese History or something. We'll create two more decks, 0 - Important dates and 1 - Meiji . Click and drag these right under the original Japanese History set to make subdecks out of them, as shown below. Anki orders sets alphabetically, so I often use numbers to realize my intended structure. Now click on \"1 - Meiji\" to enter that set. As there's no content yet you'll get an appropriate congratulatory message. Doesn't matter, we're on a different mission now, on a mission to create . Click on Add to start on your first card. This is how it will look like in the end. Before starting, it's a good thing to note you'll never actually create your own cards directly. Instead, what you're actually making in this screen is a note , a kind of blueprint containing all information relevant to a certain subject. This is useful because you'll often want different kinds of cards on the same subject. A note on a particular foreign word might contain the original, the translation, an audio file and an example sentence. If notes are blueprints for cards, note-types are blueprints for notes. Using this data, you could set up the note-type to generate three cards: one on visual recognition, one on oral recognition, and one on production, all three containing the example sentence along the answer. I made a brief, crude diagram trying to visualize the result of this tutorial. It's not 100% correct but as I'm trying to keep it simple, it should be sufficient. A set or subset contains notes. As mentioned above, those notes have a note-type and include settings like the amount of fields it contains. In a note-type, you'll also specify card-types. Card-types serve as blueprint for the actual cards you'll study: it determines things like which fields are shown and the actual layout. Thus when you create a new note, it'll generate cards based on the card-types contained in your note's note-type. If this doesn't make sense yet, don't worry, you'll get it doing this tutorial. Type:Basic means we'll create, unsurprisingly, a note of the basic type. These notes have only two fields (a front and back), and only one generated card: one that shows you the front as query, and the back as response. We'll create a new note-type in a second, but for our first note this is fine: a card on Ito Hirobumi , an important figure in the modernization of Japan during the 19th century, using below's explanation. Inserting images is easily done by copy/paste. As example, copy Ito's portrait on the right and paste it in your Create Note screen. Who Lower-rank Samurai in Choshu - politician - 4x PM - Resident-General of (protectorate) Korea - founding father of Modern Japan - assassinated by a Korean nationalist. When 1841 - 1909 Where Born in Choshu, studied in Universy College London (1863) together with Choshu Five . Spent 18 months in Europa studying different constitutions. What Originally a sonno joi movement member before foreign studies. On return, warned Japan against Shimonoseki passage war. Set up a cabinet and tax system, became prime minister and set up Meiji Constitution . Also important for the removal of several Unequal Treaties. It's a good practice to properly tag your cards as well. You can add multiple tags, separating them with spaces. This allows for quick sorting in Anki's card browser. You'll end up with something like the screenshot to the right. Now finish up by clicking add . Congrats, keep this up and you'll breeze through your exams! Creating your own cards… Efficiently ! Our first ‘efficient' card will be one on a tipping point in recent Japanese history: the Meiji Restoration in 1868 . We'll create a new note type that generates two cards, and finally, alter the basic template to allow furigana displayal on touch. This one's meant to get a feeling on Anki's diverse extension options. You'll end up with these cards: First, switch sets to the ‘ 0 - Important dates ‘ subset. If you're still on the previous add-screen, switch sets by clicking on the corresponding set button near the top right. There are various ways of creating a new note type. For now, just click on the basic type, then manage on your next dialogue screen, and add on the one thereafter. Select the first option, and name it something like DateEventDetail . Return and select this new type as your active note type. Next up, you'll be editting this note's fields. You'll want a note that: contains the event's specific date ( 1868 ), the event's name ( Meiji Restoration ) a field for more detailed information . Thus in the field screen, add a new field called Detail , and rename (don't delete) the other two to Date and Event . Go ahead and add data in our fields. For the detail field, copy-paste below's text. Copy-pasting doesn't include below's layout however, so you'll have to do this manually using the toolbar demonstrated in below's screenshot (or using classic shortcuts as ctrl-b used in other text-editors). When finished, don't click on add just yet! Cause Commodore Matthew C. Perry (Convention of Kanagawa) - unequal treaties (Harris Treaty) - sonno joi movement Rise Satsuma-Choshu Alliance - resignation of Tokugawa Yoshinobu (15th and last Tokugawa Shogun) - Boshin War Key points Restoration of imperial rule : return of the Emperor's practical abilities The end of Sakoku policy , as well as the Bushi dominated Bakufu, and 265 years of rule by Tokugawa Shogunate Five Charter Oath promulgated at Emperor Meiji's enthronement. \" one reign, one era name \" ( 一 ( いっ ) 世 ( せい ) 一 ( いち ) 元 ( げん ) ) system adopted: the start of eras named after their emperor. Effect Meiji constititution ( Ito Hirobumi , 1890) - abolition of the han system ( 廃 ( はい ) 藩 ( はん ) 置 ( ち ) 県 ( けん ) ) - abolition of the four class system ( 士 ( し ) 農 ( のう ) 工 ( こう ) 商 ( しょう ) ) - land and tax reforms - nationwide subscription - satsuma rebellion - Rapid industrialization - 富 ( ふ ) 国 ( こく ) 強 ( きょう ) 兵 ( へい ) and militarization Finally, we'll change the cards generated out of this note. Click on the Cards button and take a good look around. Terms in double brackets (eg. {{Event}} ) are variables and represent either your note's fields or its front/backside (eg. {{FrontSide}} ). Through tags as <br> and <hr> , you might notice cards use HTML (the markup language used in webdevelopment), while the style-screen in the middle defines your card's style using CSS (the same standard used for layouting in webdesign): stuff like colors, font-types, etc. Note that, while it could help, you really don't need any experience in these to make nice cards. Start by editting your current card. Name it date by clicking more → rename . Next you'll want to add the contents of your detail field to your backside's template. <br><br> creates two line breaks in HTML, adding sufficient room between the content of the two fields. {{FrontSide}} < hr id = answer > {{Event}} < br >< br > {{Detail}} Now click on the + button in the upper-right corner to add a new card. Name it Event . This time you'll edit the templates of the front and back to question you on the event's date along the details by switching the {{Event}} and {{Date}} variables around (there's a button for that, but try it manually to get a feel on variables / templates). Give if a shot. When finished, you should now have something similar to the screenshot on the left. If you're still with me, I'd like to introduce you one last useful feature (for now). This one might be less relevant for those not studying Japanese, but honestly, it's a neat one to keep in mind when designing your cards (I occasionally use it outside language-learning as well). Remember those kanji up there? They had furigana 6 on top. We'd probably want this in our cards as well. Luck goes it setting this up is extremely simple and support comes out-of-the-box: just add furigana: (all lower-caps) in front of your field variables in the card-note template screen you're in, eg. {{Detail}} becomes {{furigana:Detail}} (you won't see any visible changes yet as we haven't added the actual furigana in our text itself yet). Actually, to accomodate Japanese learners, we'll take away the crutches of kana reading aids and let it display only on touch. Add the CSS below to the bottom of your note's style (the one in the middle). This hides all furigana (or rather, ruby annotations) by default and displays them upon touch or hover. ruby rt { visibility : hidden ; } ruby :hover rt { visibility : visible ; } Now, add the actual furigana, contained in square brackets, next to their respective words: eg. 一世一元[いっせいいちげん] , 廃藩置県[はいはんちけん] , 士農工商[しのうこうしょう] , and 富国強兵[ふこくきょうへい] . When done, let's wrap things up by clicking add . Now that you've created your first set(s) and a couple of cards, I highly recommend changing the studying settings tied to your sets as well. Out of the box, Anki will add 20 new cards and allow only 100 repetitions a day . This is highly inefficient. We'll want to remove the top barrier and be in control of the amount of new cards we study. Open your main deck's settings by clicking the icon to the right and selecting settings. Don't worry, these settings pertain all sets fixed to this \"option group\", so you won't have to do this manually for all your new sets. Edit these three elements: New Cards : new cards/day -> 0 Repetitions : maximum reps/day -> 9999 Mistakes : action on difficult cards -> tag only Instead of an arbitrary number of new cards every single day, you'll be in control yourself by clicking \" customized study \" from the set's menu, and choosing the amount of new cards you'd like to study. I've exported my own copy of this example and uploaded if you want to compare or save yourself the work doing it manually: Download : Example set Japanese History Your first set… Efficiently ! If you're starting on a new language, you'll probably want to start by learning basic vocabulary common in every language (eg. words such as \"person\", \"name\", etc). If that's the case, there's no need to reinvent the wheel: look for premade decks and eventually adjust the card lay-out to your own liking. Anki's own shared deck repository is a good place to start. If there's no premade decks to your liking, but you have access to large data files such as large word lists, another solution would be to import CSV 7 files or other forms of text seperated by tabs or semicolons and mapping the contents to your note's fields. An added benefit of this approach is it's suitability for group (or class) work, by setting up a googledoc sheet, and through a joint-effort creating a large spreadsheet everyone could export as CSV. If there's demand, I could hack up a small (we'll see) guide on setting this up. Personally, I've set up my environment to import any new Japanese word I encounter online and would like to study straight into anki with audio and dictionary definitions. As this goes beyond the scope of this article, I've written another tutorial on that, and definitely recommend that approach for Japanese learners. Structuring Data \" But Stevie \", I hear you ask, \" how do I study less structured information with Anki? \" Good question. This involves some thinking on your part: what is it that you'd like to reproduce? What information would you like to memorize? Think creatively on your course and in what different ways you could structure it in bite-sized pieces to feed your ankiset 8 . Courses are designed with a certain logic in mind, after all. You could start off by making subsets on each of the big chapters of your textbook, or create the answer to potential questions first, mark the important data next, and ankify 9 this. This processing is an important step in grasping the big picture and part of the actual studying . This is the exact reason why I'm reluctant to share some of my own sets that don't involve the need for just rote memorization. Over the past two years at university I've devised and adjusted my own method to structuring and creating ankisets. Feel free to try it yourself (your mileage might vary). It goes somewhat as follows: Structure : create a structure based on the course's one (this could be as simple as copying the Table of Contents) or on repeating elements (certain theories, models, periods in time, artists, their works, etc). If the content of a single class is relatively self-containing, this is even easier. Use this as template for your set. Analyse : analyse all your available sources: your textbook, own notes, powerpoint presentations, etc. Find repeating elements, highlighted or marked parts, and everything that strikes as important. There's a reason for this and these should be given priority on memorization. Devide : try to devide and rephrase these into flashcard suitable questions. Use the Five Ws 10 as guideline if stuck (What, Who, When, Where, Why). Try to remain brief in the backside of the flashcard: I often break this rule myself, but, if you have to scroll down, it's usually too long. Style : Different information requires different styling. Alter your templates and note types to reflect these by using graphical elements, cloze-encounter, audio, different directions, etc. A simple example: to memorize important dates, I use a card with three fields (Year, Event, Information) and generate two notes on these: one displaying the year in front, one displaying the event. Both show further details on the back. Study : You've analyzed the contents. Congratulations. Get started on these new cards. If I studied something marketing-oriented I'd probably call this the SADSS-model and write an e-book called \" 5 Steps To Master All Knowledge (and make you a succesful and better person along the road) \", free of charge if you subscribe to my non-existent newsletters. If I were a social media marketeer I'd add \" Number 5 will shock you! \" as subtitle. (Don't worry. I won't do either.) Spaced Learning \" Stevie! If I'm a college student studying one, or several, language(s) alongside other theoretical classes (and I most likely am since I'm reading this blog), won't this mean I get to repeat hundreds to thousands of cards every single day?! \" Yes. Yes it does mean that. Think of it this way. You'll have to study either way. Language acquisition comes with it's sacrifices: you can't just stop studying for a few weeks and expect to come out unharmed. Building up an internal dictionary containing tens of thousands of words you recognize on sight or produce actively, utilizing grammatical structures on the spot (often under severe pressure), or comprehending speech at real-time; all of these require an effort not just to memorize but to maintain as well. Same goes for any other class, you can't cram your way through university. What this method offers is a way of structuring your data and studying efficiently: paradoxically by studying more you'll actually save time, as there's no need to repeat what you already know. If you're utilizing Spaced Repetition 11 , the data you need to know will be served (roughly) the moment you're about to forget it. \" Even if I'm on a holiday? This makes me very sad! :( I'll just pretend this method of studying is not suitable for me and dismiss anki forever! \" Sadly, this does mean maintaining your cards even when you'd prefer spending your day in a different way. There's no pause button to put your cards on hold, so if you fail to go through them several days in row, you'll have piled up all those lost days and take forever to get through them again. Of course, once the set has finished it's purpose (usually preparing for an exam), you could just as well delete it. It does feel as a waste (after all, what's the point of studying in the first place?), but sadly it's just unsustainable to maintain everything , all of this deep knowledge, till the end of times. Another approach here would be to suspend the more trivial cards and just stick on the broad outlines. The choice lies in your own hands! ™ I spent about a month on a road trip in the USA this summer; unforgettable memories aside I did maintain my Ankisets the whole time. But as I removed all of my non-Japanese sets and maintained the bare necessities of vocab and kanji, this meant only about half an hour of studying each day. That's not too bad, huh? Anyway. As I've said earlier, you'll have to study either way. It is entirely possible that the way Anki and it's spaced repetition work don't work for you, but don't lie to yourself either . 12 Find another way that does work for you. There are plenty of studying methods that could be suitable, including some interesting new ones 13 gaining popularity, but more likely as not, reading and marking your textbook a few times and cramming a summary the night before an exam is not one of them. \" But wait Stevie hold up, if I get this right, I'll be forced to use Anki, like, forever? Won't I ever be able to just quit and bask in my new-found fluency? \" This one's a bit difficult. I've heard of people using Anki for over 8 years , applying it solely as a language maintenance tool and only very occasionally adding new vocab cards when appropriate. This rings more true to me. Spaced learning means they're only getting like 5 - 10 mins worth of repeating old cards by now anyway so why not? If there's ever a time, however, when you're comfortable enough to process media as-is, and you feel you've been a slave to software for far too long, don't let me stop you uninstalling Anki and breaking out in some form of freedom dance. Just… don't let all that progress go to waste! Maintain your language skills! Wait! There is more! The main goal of this post was to introduce Anki both in it's core usage as well as the wide range of appliances in the field of both linguistic and academic studies. If you've any further questions, feel free to leave a comment below. That being said, Anki is customizable to the point books have been written on it. Thus trying to contain everything in a single post (hence \" A quick guide to Anki \") is a mission impossible. There are several other features I feel are useful (and underrepresented) enough in mainstream language blogs to warrant further writing though (namely Anki's API, statistics, useful plug-ins, and integrating Rikaisama and J-pod101's audio). Check these out in my next blogs: Setting up a perfect vocab-mining environment with Anki and Rikaisama ( coming soon ) Using Anki's API to contextualize your vocab cards with example sentences ( coming soon ) Estimating a text's difficulty based on your Anki's vocab set ( coming soon ) Further reading Anki Manual : the official Anki manual. If you're into that kind of thing, theirs is excellent and very comprehensive. I recommend saving these for after you've gotten used to the software a bit. Japaneselevelup.com : one of the most popular Japanese self-learner resources out there, themed after a roleplaying videogame (a bit gimmicky but there's a large audience for that stuff). Probably mentions Anki more as I do ( my god ). Twenty rules of formulating knowledge : an article on making quality flashcards by Dr Piotr Wozniak , the author of the very first SRS algorithm as used in Anki predecessor SuperMemo . Anki Essentials : a 100+ page guide on using Anki. Told you there were books written on Anki. I'm not much of a fan on the downloadable self-help e-book hype but this one's surprisingly good. Flashcard sets consisting of respectively 2000, 6000 or 1000 words with example sentences, all accompanied with high quality audio. They're available both as Ankisets or on Anki alternative Memrise. As I've started learning Japanese through university I can't attest for it's helpfulness yet, but the addition of spoken sentences for context is a major advantage indeed. ↩ This is for more technical users and there really is no reason not to use AnkiWeb's servers, unless they're permanently down for some reason. Read more on https://github.com/dsnopek/anki-sync-server . ↩ Except if you're on iPhone, but if you're able to afford Apple products that shouldn't be much of a problem. Aside from donations that's the only income the developers get anyway, and it's license is peanuts compared to buying any triple-A videogame on current-gen consoles. ↩ Karpicke, Jeffrey D., en Henry L. Roediger. 2008. \"The Critical Importance of Retrieval for Learning\". Science 319 (5865): 966–68. ↩ OCR : O ptical C haracter R ecognition: basically recognizing text or characters through an image (like a scan or photograph taken with your cellphone). I recently found this free manga reader for Android with OCR and dictionary which looks pretty cool. Check it out at http://ocrmangareaderforandroid.sourceforge.net/ ↩ A Japanese reading aid by printing the word's pronunciation in syllabic characters above the original word. A more general term for this is ruby, and such annotations are commonly used to romanize other languages as well. Read more: https://en.wikipedia.org/wiki/Ruby_character ↩ C omma- S eperated V alue files: plain text containing data formatted as table by seperating them through commas. ↩ The danger in this is learning information loose from it's context. Be sure to structure your ankiset accordingly as well to remain aware of the big picture. ↩ to ankify : \" to process large sets of information into small, managable flashcards prepared for the memorization tool Anki \". At least, that's how I'd expect to see this term if it were to actually exist. ↩ A popular formula of questions, whose answers are considered as base intel, in any type of problem-solving, research or journalism. Read more at https://en.wikipedia.org/wiki/Five_Ws ↩ SRS or S paced R epetition S ystem is how the Anki/learning community commonly referred to spatial learning. ↩ Actually there are several notables arguing against Spaced Repetition, but honestly, the real value in these articles lies in the counter-arguments provided in the comments. Example: https://www.scotthyoung.com/blog/2012/08/05/forgetting-is-good/ ↩ Memory Palaces (also known as Method of Loci ) are gaining some new popularity thanks to TV series Sherlock, and rely on spatial memory. Venn Diagrams and other kinds of graphical tools also target our visual memory, and are quite helpful, but these could surely be combined with SRS (in fact, I believe visual stimuli are fundamental to your sets anyway). ↩"},{"tags":"Studies","title":"A Quick Guide on Using Anki 2: an efficient vocab mining set-up with Anki and Rikaisama","url":"https://steviepoppe.net/blog/2016/09/a-quick-guide-on-using-anki-2-an-efficient-vocab-mining-set-up-with-anki-and-rikaisama/","text":"So you want to: read a Japanese novel without ending up crying yourself to sleep realizing you know nothing , Jon Snow? learn Japanese by watching anime, but like, for real? create beautiful Anki sets filled with handpicked vocabulary, hidden furigana reading aids, AND crystal-clear audio pronunciations, all without spending days of mindnumbing copypasting? Welcome to the lovely world of Integrated Anki & Rikaisama ! Rikaichan , and it's Chrome variant Rikaikun , have already been widely established as incredibly helpful tools for reading Japanese online. Nevertheless, one major function remained missing still: a seamless integration with Anki for efficient vocabulary mining. A recent extension of the original Rikaichan, aptly named Rikaisama (it's a pun !), adds several new features including communication with the Anki API, Sanseido Web Dictionary ‘s J-J dictionary definitions, access to J-Pod101 ‘s 1 audiofiles, and several more 2 . Concretely, this means audio playback of tens of thousands of words and expressions as well as easy integration of new vocab into Anki. Despite these incredibly useful features, Rikaisama remains fairly unknown and unblogged about. To counter that, this blog serves as a brief tutorial on setting up a Rikaisama/Anki environment as well as demonstrating some useful real-life appliances. Rikaisama Download Like Rikaichan, Rikaisama is a Firefox plugin, available for download on their sourceforge download page (free, of course). If you're an avid Chrome supporter, this one might be worth switching for. After installation you'll have two new buttons at your disposal, either already visible at the top-right of your menubar, or in firefox' toolbar. The left one activates Rikaisama. I just leave it permanently open. The right one switches the Rikaisama lookupbar. I don't use this one often so I hide it in the toolbox myself, but for now we'll need it to access Rikaisama's settings. Open the toolbar and click the right-most icon to open those (after we're done, click the leftmost icon to deactivate the toolbar). Rikaisama's base settings are pretty self-explanatory, and I've left most of them to their default values. For our purpose, the Clipboard & Save and Anki tabs will be the most relevant. Set-up Rikaisama's homepage contains a simple, if what rather crude, set-up guide covering the basics of linking Rikaisama with Anki. I've found some to be somewhat aversed by all the field/token mapping talk, so I'll try to simplify things a bit. This guide might still look a bit complicated, as I try to explain why we're doing things, but it's actually pretty easy to set-up and if you'd rather get straight to the point, just ignore the reasoning parts (or skip to the 1.2.4. Usage part to download a premade ankiset with matching notetype). Anki First, Anki will need an additional add-on as well in order to allow real-time import. It's ‘available' at Ankiweb's plug-in page , although actual installation is done in-app. Open Anki on your desktop, go to Tools → Add-ons → Browse & Install , and copypaste 2512410601 in the pop-up dialogue. Now, we'll create a new set to contain your Rikaisama-powered cards, a new note-type with fields corresponding to the info you'd like out of rikaisama, and finally a few card-types to test us on on visual recognition, on oral recognition, and on production. 3 Start by creating a new set, eg. rikai-vocab 4 . On Windows, press CTRL-SHIFT-N , or click Tools → Manage Note Types , to enter the notetype management screen. Click add , then ok on the next screen, to create a new note type. Call it Rikai (do note my excellent graphical skills as seen in the screenshot below ( ͡° ͜ʖ ͡°) )! Next, select the new Rikai note-type and click Fields . We'll rename the current front and backside as Expression and Meaning , and add two new Fields Audio and Notes (this one could be used for personal notes or example sentences). If you're interested in pitch accents, add a fifth field Pitch . Next, close this screen and click on Cards . We'll manage the different cards this note generates as well as it's make-up. We'll start with some basic layout. Add the following lines to the bottom of the middle Shared Style screen. For optimal learning, we'll keep word readings in kana as furigana displayed on touch/hover. This way learners are less likely to use them as a crutch. ruby rt { visibility : hidden ; } ruby :hover rt { visibility : visible ; } Next, click the + button twice to create two more card-templates. Next, rename (by clicking More → Rename ) templates Card 1 , Card 2 and Card 3 respectively as Recognition , Production , and Audio . Finally, let's wrap up our Anki set-up by creating the actual card's templates. Each card will question you on one field (the Japanese expression, the English translation and the Audio) and show the answer on the backside along with audio and any potential notes, if present. Your card's templates should look as follows: Recognition Front Template {{ furigana : Expression }} Back Template {{FrontSide}} < hr id = answer > {{Meaning}} < br > {{Audio}} {{#Notes}} < br >< br > < b > Notes: </ b > < br > {{furigana:Notes}} {{/Notes}} Production Front Template {{ Meaning }} Back Template {{FrontSide}} < hr id = answer > {{furigana:Expression}} < br > {{Audio}} {{#Notes}} < br >< br > < b > Notes: </ b > < br > {{furigana:Notes}} {{/Notes}} Audio Front Template {{ Audio }} Back Template {{FrontSide}} < hr id = answer > {{furigana:Expression}} < br > {{Meaning}} {{#Notes}} < br >< br > < b > Notes: </ b > < br > {{furigana:Notes}} {{/Notes}} If you added a fifth field Pitch , add <br><br>{{Pitch}} to the back templates of those cards. Mapping Now we'll enter our Rikaisama settings on Firefox and ensure our newly created note-type's fields match the ones in Rikaisama's anki settings. You'll have to make some adjustments in both the Anki and Clipboard & Save tabs, as documented below: Anki tab Save format : $d[$r]$t$n$t[sound:$a] Field names : Expression Meaning Audio If you added the pitch field, this becomes: Save format : $d[$r]$t$n$t[sound:$a]$t$p Field names : Expression Meaning Audio Pitch Make sure to mark the save audio checkbox. The field names field is pretty forward, it contains the field names of the note we just created in Anki. The Save format field however is a bit more complicated. It'll contain tokens or variables (similar to fields in your Anki note) available for each Japanese word hoverable through Rikaisama. Each field name must have both a corresponding token, marked by a dollar sign and a single letter (eg. Expression → $d ) as well as a token for empty spaces in between. To get our furigana, the kana reading must be encapsulated next to our expression (eg. $d[$r] ). The $a token contains just the mp3 filename. To get it to play in our cards, we require a correct format (eg. [sound:ちょうつがい - 蝶番.mp3] ), hence the [sound:$a] . Clipboard & Save tab Anki keeps all of it's assets, like audio or images, in a specific folder. Thus, we'll have to adjust the path these audiofiles are saved in rikaisama's settings as well. On a clean Anki install on windows, this folder will probably be something like C:\\Users\\your_name\\Documents\\Anki\\anki_username\\collection.media . When located, use that folder's path for your Saved Audio path. We'll also have to confirm our save format again in this tab. Just copy/paste the one you used in the other tab. I personally tag all rikai-created ankicards as such, this isn't necessary but it might come of use in your anki's browser one day. Dictionaries A final step in case you haven't used Rikaichan before, is to install some dictionaries files, available at Rikaichan's homepage . I personally use the Japanese - Dutch , 5 Japanese English and Japanese Names dictionaries, and sort them in those order in Rikaisama's configuration. Usage Now let's test our set-up! For Rikaisama to recognize which Anki set and which notes to use, we'll have to open anki and enter our set everytime we're on hunting spree. If you get a mismatch error, just click add and ensure that the selected type is Rikai by clicking on the current type and selecting the proper one (just click close again afterwards). Hover over these two words. A rikai pop with definitions should appear. 理 ( り ) 解 ( かい ) | 暗 ( あん ) 記 ( き ) (I'm not obsessed, I swear~) Now, while still hovering over them, click r (the Real-Time Import key) to import these words into your set. Hoorah! Note that Rikaisama by default does not allow duplicates, so if you try to add an earlier added word, you'll get an error message. I've exported my own copy of this example and uploaded if you want to compare or save yourself the work of creating the note template manually: Download : Example set Rikai (not done yet) Appliances Internet This one goes without saying as that's pretty much the prime objective of this tutorial. If you're a relatively new learner, NHK provides simplified news articles and videos at NHK Easy News . I used these a lot near the end of my first year studying, and it's a neat way to stay up to date with what's going in Japan, or more generally in the world, as well (it's rather awkward if you don't, as Japanologist or student in cultural or social sciences). Novels 「言い方がまちがってるわ。ウィン、ガー・デイアム レヴィ・オーサ。『ガー』と長一くきれいに言わなくちゃ」 6 JNovelFormatter JNovelFormatter is a neat little tool, by the developer of Rikaisama 7 that converts japanese literature in .txt format into clean parsed HTML files. Layout is fairly customizable, although I think the original settings are easy on the eye as-is (I like dark backgrounds when reading for hours at a time, makes me feel less like I'm gazing straight into a lightbulb). End of sentence dots get turned into bookmarkable anchors so you won't lose track of your progress. I highly recommend this method! I've used this approach while reading The Girl Who Leapt Through Time ( 時 ( とき ) をかける 少 ( しょう ) 女 ( じょ ) ) during our 読 ( どく ) 書 ( しょ ) クラブ ‘s book-reading sessions and just last week, as a kind of summer project, worked my way through the first Harry Potter (a surprisingly high difficulty but I know the original by heart so that helped heaps context-wise). As for resources, there's plenty to be found online. Light novels are commonly uploaded in text format and probably a good starting point for the more advanced learner. 8 I've heard Zero no Tsukaima ( ゼロの 使 ( つかい ) 魔 ( ま ) ) and Kino no Tabi ( キノの 旅 ( たび ) ) are relatively easy reads, for example. 9 Aozora http://www.aozora.gr.jp/ , pretty much the Japanese Gutenberg project, freely hosts tons of public-domain books online. 10 Check out Natsume Sōseki's classic Botchan as example . Their literary standards are a bit higher as the typical light novel so it's quite an adjustment, but great for those who're looking for easy-to-find, legally obtainable literature. Anime A really cool concept recently released is Animelon's multi-layer subtitled anime streaming web-app, akin to the Erin's Challenge video's (except with arguably way more interesting content: as of date there are over 60 series hosted, mostly all big names ranging from more recent hits as SAO and Attack on Titan to classics as Fullmetal Alchemist: Brotherhood and Clannad). If I were to recommend one to start with, I'd definitely pick Clannad. 11 The high-school setting means relatively easy and casual vocabulary (as opposed to, for example, SAO's highly technical and fantasy-related vocab you'll barely ever encounter in real life), while the voice acting's pacing is calm enough to pick up as relative beginner, and devoid of difficult accents. Check out their video demonstration below to see the various possibilities: What bothers me a bit is the legality of it all. They're currently keeping this site up as proof-of-concept in search of potential buyers but meanwhile they're hosting full series in HD quality \"for educational purposes only\". I'm not complaining but I hope they survive, since this service is golden, really. Gaming This one's a bit tricky still. The new web-possibilities since the implementation of the latest HTML-standard, HTML5, have given rise to a broad range of games running natively in your browser without the need of additional clutter such as Adobe Flash. Especially visual novels, a big thing in Japan, would be most suitable for our purpose, considering the large amounts of text. Except so far the online playable ones I've found were either already translated into English, or else of the early '90s abandonware eroge kind, so not what I was looking for (you'll easily find that online if that's your cup of tea). Another option is to set up your gaming environment in such a way it enables you to use these features. There's an active community of technically capable Japanese learners at Reddit and Koohii who came up with such a thing. I've yet to try this myself, and honestly, it's a bit bloated, but if you're dying to play visual novels and learn Japanese at the same time, this'll do the trick: Get Visual Novel Reader : it appears to be a mask to be run over an already installed visual novel, using OCR to capture Japanese text, parse it, and run it through some dictionaries ( Tutorial ). Use the Firgana Inserter Firefox Plug-in to automatically copy-paste dialogue from your clipboard, obtained dynamically through OCR by above means, to an empty Firefox screen. If you're running Firefox and your game side by side you'll be able to max up your visual novel ankisets in no time, just like this guy! My Plug-in If there's one downside to this method, it's that an audio reference will be added to your cards regardless if there's an existant audio recording online. This is especially the case with lesser known words or idoms: while reading Harry Potter I've added a few hundred of such cards. Now, one solution is to, whenever you come across such a card during your anki-time, manually delete the audio entry in your card's Audio field and occasionally clearing all \"empty\" card notes by selecting Tools → Empty Cards . To automatize this process however, I've written a small python plug-in to remove all references to non-existant audio files. Install it by clicking Tools → Add-ons → Browse & Install and copy-pasting 1328067109 there (you'll have to restart Anki afterwards). To use, just click Tools → Remove Absent Audio References . Next, click Tools → Empty Cards to remove all the empty oral-recognition cards. In case you're interested, this plug-in is hosted on Anki's add-on page here . Wait! There is more! The main goal of this post was to introduce a less known, but highly useful, Anki functionality by linking Rikaisama's excellent 12 pop-up dictionary with Anki's API, as well as show several possible appliances. If you've any further questions, feel free to check out the other articles in this series on Anki, or to leave a comment below. A Quick Guide on Using Anki (effectively) (in an academic context) ( coming soon ) Using Anki's API to contextualize your vocab cards with example sentences ( coming soon ) Estimating a text's difficulty based on your Anki's vocab set ( coming soon ) Further reading AwesomeTTS for Anki : My approach uses JapanesePod101's vast audio library. However, not occasionally I encounter words that have no native spoken audio recorded. If you want completion, this open-source tool allows for text-to-speech in your Anki cards. I haven't done this myself however, so your mileage might vary. Learn Japanese Through Videogames : speaking of videogames, you could also look up videogame scripts ( セリフ 集 ( しゅう ) ) and vocab-mine from those. This guy wrote a decent blog on that. The recent Phoenix Wright spin-off, Dai Gyakuten Saiban, has yet to be confirmed to receive a western release, so I'll have to brush up my court of law vocab this way before playing. A popular online language course podcast. They have podcasts ranging from newbie (mostly English) to upper intermediate (100% Japanese). I used to use these in the beginning as the added scripts are quite helpful for raising listening skills. The male, English speaking is notoriously difficult to stand, however, and despite most content being free, they have some iffy marketing techniques. Regardless, they recorded a dictionary's worth of vocabulary in high quality audio for Jim Breen's dictionary, so that's hella cool. Read more: http://blogs.japanesepod101.com/blog/2009/04/20/biggest-announcement-ever-edict-japanese-dictionary-now-with-audio-for-every-clip-must-hear ↩ Other useful features include pitch order, updated frequency lists, and EPWING dictionary support if you're into that. The full list is on their homepage. ↩ I'll assume concepts like notes and types are somewhat clear to the reader. If not, I refer to that particular section of my previous Anki article Creating your own cards… Efficiently ! for a more detailed guide on notes and setting up templates. ↩ I personally keep several sets containing rikai-powered cards. A set for each new book I read, sets for vocab related to my studies, and a set for whatever I come across online. I do this to keep my priorities in check: during exams I give less priority to keeping up to date with my books/misc vocab. ↩ Courtesy of Leuven University's very own Japanology department! More info on the Waran Jiten Japanese-Dutch dictionary at http://japansnederlandswoordenboek.org/index.php/Hoofdpagina ↩ The single most satisfying scene from the Japanese edition of the first Harry Potter novel. ↩ Actually, this guy made a lot of surprisingly helpful tools for learning Japanese, including the more popular \"sbs2srs\" for creating Anki sets based on subtitles and video, and OCR Manga Reader, a manga reader with Rikaichan-like functionality using optical character recognition. Full list is at http://rtkwiki.koohii.com/wiki/Community_Tools ↩ I'll refrain from linking here as that's legally gray territory. ↩ Then again, Joyce's Ulysses is probably an easy read as well compared to the likes of Proust's In Search of Lost Time, so I'll come back to this statement when I've judged for myself. ↩ According to Wikipedia, they host over 10.000 works including both out-of-copyright or made freely available by the authors. Read more: https://en.wikipedia.org/wiki/Aozora_Bunko ↩ If you're watching Clannad: After Story afterwards, keep tissues at hand. ↩ Actually, while Rikaisama improves greatly upon Rikaichan, there's still some features I'd like to see implemented such as the ability to display sanseido-mode J-J as well as default J-E at the same time, or to select which definition to ankify. The developer set up a to-do list of sorts, but as it's a one-man hobbyist project I'll expect these to be implemented rather slowly. ↩"},{"tags":"technical","title":"Anki Plugin","url":"https://steviepoppe.net/blog/2016/09/anki-plugin/","text":"Due to my studies I (will) often use Japanese in my blog. As I gave some thought to typography and readability, I found the default appearance of Japanese text to be in stark contrast with the rest of my design. 1 To target specifically Japanese text, I wrote a small Markdown-Python extension for use in static blog generators as Jekyll and Pelican (or pretty much anything that utilizes Markdown-Python to parse Markdown in HTML) and embed such text in a span with the language attribute set to Japanese. The added, and probably more important bonus, aside from styling and semantic reasons, is that this method counters the negative effects of Han unification in so-called CJK-languages. Download I've added the extension on it's own repository on my github for anyone interested, but as it serves it's purpose for me as-is I have no further interest in maintaining it at the moment. 2 Installation Copy the japanese.py script into your python-markdown extension directory. If you're using Pelican as static site generator, open your project's pelicanconf.py and add 'japanese' to the MD_EXTENSIONS list: MD_EXTENSIONS = [ 'japanese' ] Usage Using a simple regular expression (\\{\\{)(.+?)(\\}\\}) , the extension treats double {} brackets as span tags with a lang=\"ja\" attribute. {{ 読書クラブ }} will output < span lang = \"ja\" > 読書クラブ </ span > Example 1 (fonts): just compare 読 ( どく ) 書 ( しょ ) クラブ (custom) to 読 ( どく ) 書 ( しょ ) クラブ (Meiryo) to 読 ( どく ) 書 ( しょ ) クラブ (MS Gothic default). 3 Example 2 (unihan): compare the Chinese to Japanese characters: 隆 ( 隆 ), 誤 ( 誤 ), 直 ( 直 ). 4 Styling Although it's a bit of a risk performance-wise, I'm quite a fan of Google's free webfonts. 5 Due the complexity of the Japanese character-set, development on these have been slow 6 , but Google's Noto Font is getting quite performant and with the Japanese font set supporting near 7000 characters, it should pose no problem for most webprojects. Since it works better, typography-wise, with the rest of my fonts, I use this one over fonts as Meiryo that're more widespread across all platforms. Using the CSS below, I ensure max compatibility by using Meiryo and others as fallback if the page can't connect to Google's font API. @import url ( https :// fonts .googleapis.com / earlyaccess / notosansjapanese .css ) ; [ lang = \"ja\" ] { font-family : \"Noto Sans Japanese\" , \"メイリオ\" , \"Meiryo\" , \"ヒラギノ角ゴ Pro W3\" , \"Hiragino Kaku Gothic Pro\" , \"ＭＳ Ｐゴシック\" , \"MS PGothic\" , Sans - Serif ; font-weight : 100 ; font-size : 95% ; } Further reading http://www.growingwiththeweb.com/2014/03/languages-and-chinese-characters-on-the-web.html http://nimbupani.com/declaring-languages-in-html-5.html https://design.studio-umi.jp/blog/google-web-font-japan http://kanjialive.com/2013/04/selecting-a-better-japanese-font-for-windows-web-browsers/ This is less so on mobile devices. Most Windows web browsers default to MS Gothic, lacking anti-aliasing found in newer fonts as Meiryo, and require some manual adjustments. For maximal compatibility, I prefer to do this in-site. If no further customization is necessary, just adding Meiryo as fallback font in the page's font-family is sufficient, eg. font-family: Arial, Helvetica, Meiryo,sans-serif; . ↩ A possible extension could be one where different regular expressions test for different languages and thus deliver different lang attributes. If I find the need for that on my own blog (eg. Korean), I'll update this. ↩ For furigana support I use an existing MD extension available at https://github.com/djfun/furigana_markdown . ↩ If a multilingual page uses only Japanese, it's sufficient to put a Japanese font as fallback in the body's font-family. If occasionally Chinese or Korean characters are used as well, this approach, aside from semantic benefits, remains more recommended. ↩ I use Quicksand and Poirot One for all my latin-based text on this page, for example. ↩ Adobe's competing, subscription-based Typekit apparently offers a wider range of Japanese webfonts for anyone interested: https://typekit.com/fonts?script=japanese . ↩"},{"tags":"technical","title":"Parsing Japanese Text in Markdown-Python for Stylizing and Semantic Purposes","url":"https://steviepoppe.net/blog/2016/09/parsing-japanese-text-in-markdown-python-for-stylizing-and-semantic-purposes/","text":"Due to my studies I (will) often use Japanese in my blog. As I gave some thought to typography and readability, I found the default appearance of Japanese text to be in stark contrast with the rest of my design. 1 To target specifically Japanese text, I wrote a small Markdown-Python extension for use in static blog generators as Jekyll and Pelican (or pretty much anything that utilizes Markdown-Python to parse Markdown in HTML) and embed such text in a span with the language attribute set to Japanese. The added, and probably more important bonus, aside from styling and semantic reasons, is that this method counters the negative effects of Han unification in so-called CJK-languages. Download I've added the extension on it's own repository on my github for anyone interested, but as it serves it's purpose for me as-is I have no further interest in maintaining it at the moment. 2 Installation Copy the japanese.py script into your python-markdown extension directory. If you're using Pelican as static site generator, open your project's pelicanconf.py and add 'japanese' to the MD_EXTENSIONS list: MD_EXTENSIONS = [ 'japanese' ] Usage Using a simple regular expression (\\{\\{)(.+?)(\\}\\}) , the extension treats double {} brackets as span tags with a lang=\"ja\" attribute. {{ 読書クラブ }} will output < span lang = \"ja\" > 読書クラブ </ span > Example 1 (fonts): just compare 読 ( どく ) 書 ( しょ ) クラブ (custom) to 読 ( どく ) 書 ( しょ ) クラブ (Meiryo) to 読 ( どく ) 書 ( しょ ) クラブ (MS Gothic default). 3 Example 2 (unihan): compare the Chinese to Japanese characters: 隆 ( 隆 ), 誤 ( 誤 ), 直 ( 直 ). 4 Styling Although it's a bit of a risk performance-wise, I'm quite a fan of Google's free webfonts. 5 Due the complexity of the Japanese character-set, development on these have been slow 6 , but Google's Noto Font is getting quite performant and with the Japanese font set supporting near 7000 characters, it should pose no problem for most webprojects. Since it works better, typography-wise, with the rest of my fonts, I use this one over fonts as Meiryo that're more widespread across all platforms. Using the CSS below, I ensure max compatibility by using Meiryo and others as fallback if the page can't connect to Google's font API. @import url ( https :// fonts .googleapis.com / earlyaccess / notosansjapanese .css ) ; [ lang = \"ja\" ] { font-family : \"Noto Sans Japanese\" , \"メイリオ\" , \"Meiryo\" , \"ヒラギノ角ゴ Pro W3\" , \"Hiragino Kaku Gothic Pro\" , \"ＭＳ Ｐゴシック\" , \"MS PGothic\" , Sans - Serif ; font-weight : 100 ; font-size : 95% ; } Further reading http://www.growingwiththeweb.com/2014/03/languages-and-chinese-characters-on-the-web.html http://nimbupani.com/declaring-languages-in-html-5.html https://design.studio-umi.jp/blog/google-web-font-japan http://kanjialive.com/2013/04/selecting-a-better-japanese-font-for-windows-web-browsers/ This is less so on mobile devices. Most Windows web browsers default to MS Gothic, lacking anti-aliasing found in newer fonts as Meiryo, and require some manual adjustments. For maximal compatibility, I prefer to do this in-site. If no further customization is necessary, just adding Meiryo as fallback font in the page's font-family is sufficient, eg. font-family: Arial, Helvetica, Meiryo,sans-serif; . ↩ A possible extension could be one where different regular expressions test for different languages and thus deliver different lang attributes. If I find the need for that on my own blog (eg. Korean), I'll update this. ↩ For furigana support I use an existing MD extension available at https://github.com/djfun/furigana_markdown . ↩ If a multilingual page uses only Japanese, it's sufficient to put a Japanese font as fallback in the body's font-family. If occasionally Chinese or Korean characters are used as well, this approach, aside from semantic benefits, remains more recommended. ↩ I use Quicksand and Poirot One for all my latin-based text on this page, for example. ↩ Adobe's competing, subscription-based Typekit apparently offers a wider range of Japanese webfonts for anyone interested: https://typekit.com/fonts?script=japanese . ↩"},{"tags":"Personal","title":"Visiting a Japanese Elementary School - An (Awkward) Experience to Remember","url":"https://steviepoppe.net/blog/2016/08/visiting-a-japanese-elementary-school-an-awkward-experience-to-remember/","text":"Earlier this year I, alongside several other second year Japanology students, participated in a small \"tell an interesting story\" speech contest through our university. This week we were informed the videorecordings of these had been uploaded on the contest's website and were available for all to watch 1 . My story is a classic \"awkward Japanese language mix-up\" anecdote on a visit to a Japanese elementary school in Brussels, which I'll touch upon in this post, along embedding the video. ( 日本の方、あまりよくないんですけど、もしよかったら見てみてくださいね！ ) The Video This video, along with my participation entry, is available at speech-data.jp . The story This story really isn't that interesting and a bit embarassing, but here goes anyway! As second year students Japanology, our class participated in an excursion to a Japanese elementary school in Brussels: a fun opportunity to practice our language skills as well as have some fun playing games and learn about cultural differences and customs. The event even warranted a small post on the JSB 2 section on yahoo.co.jp ! In advance of this trip, we split our class in several groups, each preparing a presentation or activity related to our country. Several of the students in our group live in Antwerp, thus we thought it fun to hold a small presentation on the famous Antwerp folklore story of Druon Antigoon , an evil giant guarding a bridge and exacting an exorbitant toll of those wishing to cross. Failing to cross meant getting your hand chopped off and trown into the river 3 . A bit dark, but it worked well with a popular Belgian children's game we thought fit to teach them, and in addition, there's some really nice chocolate treats based on this tale we wanted to distribute afterwards. The game The game is a variation of a classic tag game called \" schipper, mag ik over varen? \" (Eng: \" Skipper, might I cross? \") and usually played on a school's courtyard or in a larger PE classroom. To play, the territory gets divided into two and the students line up on either side. One or two volunteers play the role of \"skipper\" or \"boatsman\" and line up in the middle (I drew a quick MS paint diagram below, don't judge). Each round, those on the border are expected to reach the other side. Those playing the role of skipper make up a rule that has to be upheld to attain passage. Rules to pass could be anything: those wearing glasses, those skipping on one leg, etc. Not being able to uphold these rules however means running past the skipper and not being caught: if you're tagged, you become a skipper as well. The more skippers, the more difficult the game becomes. The shame Me and a classmate played the role of skipper and did pretty well making up rules in Japanese. Near the end however, I noticed several of the remaining players wearing pink pants. \" I should definitely use this information for the next skipping rule \", I thought to myself. Now, the common word for pants in Japanese is ズボン ( zubon ), probably one of the first words we learned. Except during the heat of the moment I mixed this one up with another Japanese word very similar to the english \"pants\". The end … Long story short, in front of not just my own teachers but all of the Japanese staff present, I asked a bunch of 12 year old girls to pass if they wore pink パンツ ( pantsu ), a word commonly reserved for underwear. Hope I won't make that mistake again. 4 These videos can be found @ http://www.speech-data.jp/chotto/2015F_sub/ ↩ Short for the J apanese S chool of B russels, read more on this on Wikipedia ! ↩ Lucky for us Antwerp citizens, a young soldier named Brabo cuts of the giant's hand in return and casts it into the river, leaving us with some nice statues near the city square and an interesting story to tell tourists. Read more on this on Wikipedia ! ↩ I was confronted with a loud 「えええええええぇぇぇぇぇぇッ！！！」 coming from these girls' general direction. Everyone else looked particularly amused however, so that's something at least. ↩"},{"tags":"Technical","title":"Pelican Plugin: CSS-only footnote pop-up","url":"https://steviepoppe.net/blog/2016/08/pelican-plugin-css-only-footnote-pop-up/","text":"Footnotes are a classic staple in any writer's toolbox and allows them to, in an unobtrusive way, citate sources or display additional information not directly related to the original argument. Yet I feel online footnotes, through the way they're often implemented imitating printed media footnotes, come over quite counterintuitive by forcing the interested reader to disrupt his reading flow, and by failing to make use of today's extensive webdesign posibilities. As I royally use footnotes in my markdown writing workflow 1 I figured I'd get acquainted with the Pelican documentation a bit and write a small unobtrusive CSS pop-up plugin to display these on hover for those devices that support it. 2 My solution is pretty rough and based on the way Python-Markdown parses markdown into HTML. As it's a quick ‘n dirty workaround untested with other parsers, I have no intention to further maintain this code so feel free to use it however you'd like. def content_object_init ( instance ): if instance . _content is not None : content = instance . _content soup = BeautifulSoup ( content , 'html.parser' ) if 'sup' in content : footnotes = soup . find ( class_ = \"footnote\" ) . find_all ( 'p' ) footnoteref = soup . find_all ( class_ = \"footnote-ref\" ) for index , item in enumerate ( footnotes ): footnoteref [ index ] . parent [ 'class' ] = 'popup_footnote' tag = soup . new_tag ( 'span' ) tag . append ( BeautifulSoup ( item . decode_contents (), 'html.parser' )) footnoteref [ index ] . insert_after ( tag ) instance . _content = soup . decode () def register (): signals . content_object_init . connect ( content_object_init ) For simplicity's sake I use the BeautifulSoup library to locate all footnote references and their respective footnotes. Then I loop through them and copy the contents of the footnote in a ‘popup_footnote' span I append to the footnote reference container. Styling is done in CSS. Below is my markup. I use left: 50%; transform: translate(-50%, 0); to center the absolute-positioned pop-up over the footnote reference. sup .popup_footnote span { text-align : justify ; z-index : 10 ; display : none ; padding : 5px ; line-height : 16px ; opacity : 0 . 9 ; border - radius : 4px ; box - shadow : 5px 5px 8px #D4D4D4 ; top : 10px ; left : 50% ; transform : translate ( -50% , 0 ); position : absolute ; width : 250px ; } sup .popup_footnote :hover span { display : inline ; color : #111 ; border : 1px solid #eaeaea ; background-color : #fffcfc ; } The downside to this CSS-only implementation (next to having double content in your markup) is that it fails to respond well to responsive design. Fixed-size pop-ups relative to the footnote pointer could result in a potential screen overflow. If this is an issue, the only alternative is using jquery and calculate the position of your reference relative to the window border and use this to calculate an ideal pop-up location. Of course if you're relying on the jquery library either way you might as well use that to copy the footnote on hover instead of above's solution. For such an example, I recommend ignorethecode.net's solution . The difficulty writing web-content with footnotes is distinguishing footnotes or direct links. I generally draw the line between source citation as footnote and useful information as direct link. ↩ Using :active to substitute the lack of proper hover on touch devices wouldn't be effective as these pop-ups display over anchors. A dirty solution would be to use media tags and keep display:none for mobile device widths, but with the blurring of lines between touch and mouse input devices lately this is not foolproof. ↩"},{"tags":"technical","title":"Hello World - About This Blog","url":"https://steviepoppe.net/blog/2016/08/hello-world-about-this-blog/","text":"I've been thinking on maintaining a blog for a while now and had already stacked up a pile of writings ready to post. A long summer break allowed me enough free time to sit down and get started on the technicalities; a process a bit more complicated as initially expected but worth it in the long run. This blog serves not as a tutorial on making one with Pelican (I'll get to that eventually), but as a brief log on my reasoning and thought process during creation. Blogplatform Deciding From the outset I tried to steer away from heavy content management systems such as Drupal or WordPress . They're easy to work with and take a lot of work of your hands, but a serverside database means too heavy a load for what's basically a smallscale personal blog, and several unnecessary security risks on top. 1 The tech-hipster in me opted for a DIY approach with full control over both content and design. Static blog framework wise there are several popular options, but as I'm more accustomed to the Python programming language through other applications, I ended up choosing for Pelican over the more widespread Ruby -based Jekyll . An added value of managing my blogs clientside and delivering small sized static pages is the ease of finding an appropriate host (I host my pages on GitHub Pages while serving larger files through Dropbox) and a seamless integration in my Markdown -based writing workflow. 2 Set-up The initial set-up is relatively simple, as installation and basic generation is done through command line, and content written in Markdown , AsciiDoc or reStructuredText 3 gets served as stand-alone pages or articles. There's a wide choice of existing templates , but further customization requires some working knowledge on webdesign as well as, preferably, on basic programming concepts (Pelican templates are created using the python-based Jinja2 , allowing for template logic and inheritance). Needless to say, hosting on GitHub Pages requires knowledge of Git , but that's really not a skill learned in vain as the concept of version control applies well to writing important papers too. Development Getting acquainted with these tools can be time consuming. Luckily Pelican's well documented , and there are plenty of tutorials out there, as well as hundreds of working examples hosted on GitHub available as reference (the backbone of my template is a heavily modified Plumage theme). I prefer a minimalistic layout easy on the eye, and steered clear of unnecessary clutter, but with the advent of visual blogging 4 I figured I'd integrate some graphical elements, such as article banners (that's the extent of it really, I'm not much of na artist), as visual content engages the reader more easily. One easily overlooked design problem is ensuring responsive webpages for the ever increasing mobile internet traffic 5 , but with easy support for Sass , or just using Twitter's Bootstrap framework, this comes pretty naturally. Finally, implementing additional features is pretty easy too. There's a wide range of existing plugins for features like searching, minifying assets, table of contents and comments (using the third-party Disqus blog hosting service). Hosting GitHub has allowed free hosting for static personal or projectsites on GitHub Pages for a while now. This boils down to creating a new repository with your username and GitHub url ( steviepoppe.github.io ) and hosting your pages there. I created an additional source branch to host all my sourcefiles, use ghp-import to place my output files in a seperate branch, and force push that to the master branch on GH Pages. 6 pelican content - o output - s publishconf . py && ghp - import output && git push - f origin gh - pages : master So far GitHub's SSL certificate only covers *.github.io domains, there's no support yet for custom domains. Thus as final step after having set up my custom domain, and as an additional security layer, I use CloudFare to secure part of the connection and enroll some further optimisations. Conclusion While further customization requires some technical experience (or at least the proper mindset), I believe the base set-up is easy enough for anyone to learn and allows for more control over your own content and a smoother workflow as you would have relying on big CMS systems. Any extra skills learned will definitely come in use as digital publishing, webdesign and working with Git or other forms of version control become more and more basic skills anyone should possess. In retrospect, Jekyll appears to be an easier option for beginners with it's widespread usage, but both Jekyll and Pelican achieve the same thing, so this is personal choice really. I'll end up writing a full step-by-step beginner's guide on setting up Pelican and hosting on GitHub Pages eventually, but for now I'll post several decent tutorials below. Further reading http://arunrocks.com/moving-blogs-to-pelican/ http://cyrille.rossant.net/pelican-github/ http://duncanlock.net/blog/2013/05/17/how-i-built-this-website-using-pelican-part-1-setup/ http://guizishanren.com/guide-to-set-up-github-page-and-pelican/ Burnett, Brett. 2015. \"Why Did We Migrate from Drupal to Jekyll?\" Text. The BHW Group. https://thebhwgroup.com/blog/jekyll-drupal-wordpress ↩ O'Nolan, John. 2015. \"The Ultimate Guide to Writing & Publishing with Markdown\". Ghost. https://blog.ghost.org/markdown/ ↩ All three are open, lightweight markup languages with a heavy focus on readability through seperation of content and layout layers. ↩ Fanguy, Will. 2016. \"The Amazing Evolution of Visual Storytelling: Blogging, Instagram, Snapchat, and the Future\". Business 2 Community. http://www.business2community.com/trends-news/amazing-evolution-visual-storytelling-blogging-instagram-snapchat-future-01557833 ↩ ‘ the amount of mobile traffic now accounts for more than half of total internet traffic ‘ \"Cisco Visual Networking Index: Global Mobile Data Traffic Forecast Update, 2015–2020 White Paper\". 2016. Cisco. http://www.cisco.com/c/en/us/solutions/collateral/service-provider/visual-networking-index-vni/mobile-white-paper-c11-520862.html ↩ I'm doing this manually through command line for now, but there's several automatisation options including using Travis-CI for the more hardcore blogger. ↩"}]}