<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Onoreto</title><link>https://steviepoppe.net/</link><description>@Stevie Poppe</description><lastBuildDate>Tue, 06 Sep 2016 00:00:00 +0200</lastBuildDate><item><title>Parsing Japanese Text in Markdown-Python for Stylizing and Semantic Purposes</title><link>https://steviepoppe.net/blog/2016/09/parsing-japanese-text-in-markdown-python-for-stylizing-and-semantic-purposes/</link><description>
&lt;p&gt;Due to my studies I (will) often use Japanese in my blog. As I gave some thought to typography and readability, I found the default appearance of Japanese text to be in stark contrast with the rest of my design.&lt;sup id="fnref:1"&gt;&lt;/sup&gt; To target specifically Japanese text, I wrote a small Markdown-Python extension for use in static blog generators as Jekyll and Pelican (or pretty much anything that utilizes Markdown-Python to parse Markdown in HTML) and embed such text in a span with the language attribute set to Japanese. The added, and probably more important bonus, aside from styling and semantic reasons, is that this method counters the negative effects of &lt;a href="https://en.wikipedia.org/wiki/Han_unification"&gt;Han unification&lt;/a&gt; in so-called CJK-languages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stevie Poppe</dc:creator><pubDate>Tue, 06 Sep 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:steviepoppe.net,2016-09-06:blog/2016/09/parsing-japanese-text-in-markdown-python-for-stylizing-and-semantic-purposes/</guid><category>python</category><category>pelican</category><category>markdown</category><category>Japanese</category><category>fonts</category></item><item><title>Pelican Plugin: CSS-only footnote pop-up</title><link>https://steviepoppe.net/blog/2016/08/pelican-plugin-css-only-footnote-pop-up/</link><description>
&lt;p&gt;Footnotes are a classic staple in any writer’s toolbox and allows them to, in an unobtrusive way, citate sources or display additional information not directly related to the original argument. Yet I feel online footnotes, through the way they’re often implemented imitating printed media footnotes, come over quite counterintuitive by forcing the interested reader to disrupt his reading flow, and by failing to make use of today’s extensive webdesign posibilities.&lt;/p&gt;
&lt;p&gt;As I royally use footnotes in my markdown writing workflow&lt;sup id="fnref:1"&gt;&lt;/sup&gt; I figured I’d get acquainted with the Pelican documentation a bit and write a small unobtrusive CSS pop-up plugin to display these on hover for those devices that support it.&lt;sup id="fnref:2"&gt;&lt;/sup&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stevie Poppe</dc:creator><pubDate>Thu, 25 Aug 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:steviepoppe.net,2016-08-25:blog/2016/08/pelican-plugin-css-only-footnote-pop-up/</guid><category>Pelican</category><category>Markdown</category><category>Python</category><category>Footnotes</category></item><item><title>Hello World - About This Blog</title><link>https://steviepoppe.net/blog/2016/08/hello-world-about-this-blog/</link><description>
&lt;p&gt;I’ve been thinking on maintaining a blog for a while now and had already stacked up a pile of writings ready to post. A long summer break allowed me enough free time to sit down and get started on the technicalities; a process a bit more complicated as initially expected but worth it in the long run. This blog serves not as a tutorial on making one with Pelican (I’ll get to that eventually), but as a brief log on my reasoning and thought process during creation.&lt;/p&gt;
&lt;h1 id="blogplatform"&gt;&lt;a class="toclink" href="#blogplatform"&gt;Blogplatform&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="deciding"&gt;&lt;a class="toclink" href="#deciding"&gt;Deciding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the outset I tried to steer away from heavy content management systems such as &lt;strong&gt;Drupal&lt;/strong&gt; or &lt;strong&gt;WordPress&lt;/strong&gt;. They’re easy to work with and take a lot of work of your hands, but a serverside database means too heavy a load for what’s basically a smallscale personal blog, and several unnecessary security risks on top.&lt;sup id="fnref:1"&gt;&lt;/sup&gt; The tech-hipster in me opted for a DIY approach with full control over both content and design. Static blog framework wise there are several popular options, but as I’m more accustomed to the &lt;em&gt;Python&lt;/em&gt; programming language through other applications, I ended up choosing for &lt;strong&gt;&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;&lt;/strong&gt; over the more widespread &lt;em&gt;Ruby&lt;/em&gt;-based &lt;strong&gt;&lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;&lt;/strong&gt;. An added value of managing my blogs clientside and delivering small sized static pages is the ease of finding an appropriate host (I host my pages on &lt;strong&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;&lt;/strong&gt; while serving larger files through Dropbox) and a seamless integration in my &lt;em&gt;Markdown&lt;/em&gt;-based writing workflow.&lt;sup id="fnref:2"&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="set-up"&gt;&lt;a class="toclink" href="#set-up"&gt;Set-up&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The initial set-up is relatively simple, as installation and basic generation is done through command line, and content written in &lt;em&gt;Markdown&lt;/em&gt;, &lt;em&gt;AsciiDoc&lt;/em&gt; or &lt;em&gt;reStructuredText&lt;/em&gt;&lt;sup id="fnref:3"&gt;&lt;/sup&gt; gets served as stand-alone pages or articles. There’s a wide choice of &lt;a href="http://www.pelicanthemes.com/"&gt;existing templates&lt;/a&gt;, but further customization requires some working knowledge on webdesign as well as, preferably, on basic programming concepts (Pelican templates are created using the python-based &lt;strong&gt;&lt;a href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;&lt;/strong&gt;, allowing for template logic and inheritance). Needless to say, hosting on GitHub Pages requires knowledge of &lt;strong&gt;Git&lt;/strong&gt;, but that’s really not a skill learned in vain as the concept of version control applies well to writing important papers too.&lt;/p&gt;
&lt;h2 id="development"&gt;&lt;a class="toclink" href="#development"&gt;Development&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting acquainted with these tools can be time consuming. Luckily Pelican’s &lt;a href="http://docs.getpelican.com/en/3.6.3/#"&gt;well documented&lt;/a&gt;, and there are plenty of tutorials out there, as well as hundreds of working examples hosted on GitHub available as reference (the backbone of my template is a heavily modified &lt;em&gt;&lt;a href="https://github.com/kdeldycke/plumage"&gt;Plumage ...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stevie Poppe</dc:creator><pubDate>Tue, 23 Aug 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:steviepoppe.net,2016-08-23:blog/2016/08/hello-world-about-this-blog/</guid><category>pelican</category><category>blog</category><category>github</category></item></channel></rss>