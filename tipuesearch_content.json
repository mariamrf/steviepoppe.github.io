{"pages":[{"title":"About","tags":"pages","url":"https://steviepoppe.github.io/about/","text":"#About me Hello! I'm Stevie, a Belgian student at the University of Leuven. This page serves as a brief biographical introduction, as well as explaining the aims of this blog. Having formerly attained a BA in Applied Informatics, 1 I'm currently pursuing a degree in Japanology at the University of Leuven; a radical switch, but one through which I'm able to combine both my strong interest in humanities as in the country of Japan. Growing up in a poor Antwerp neighbourhood as the only kid at school of a supposed Belgian origin, and later onwards as a technical school (TSO) student, I have seen, and been confronted with, all kinds of discrimination. This has led me to an interest in (and questioning of) the notion of national identity and nationalism itself, as well as more broadly, an interest in the fields of sociology and politics. That aside, I've become particularly drawn to Digital Humanities, a domain that feels, through several years of fostering technical skills, right at home as a perfect synthesis of both my former and current studies. On a personal note, I'm fairly passionate about music. I've spent the better part of my life taking piano classes or playing in bands, and despite an ever shrinking lack of free time, enjoy spending most of it on composing. This blog serves as a platform for random musings on personal subjects (usually on languages, Japan or my studies in general, but I hope to occasionally plug whatever music I'm working on as well!) as well as a means to hone my linguistic proficiency. That aside, I hope I'll be able to provide some assistence to my fellow students (or anyone interested) on technical aspects related to the academic studies. #This blog I host my blog, built on the versatile and lightweight Pelican framework, on GitHub Pages , using a custom made theme based on the plumage template. As my workflow involves writing most of my papers in markdown syntax anyway (I'm trying to incorporate a \"less is more\" attitude wherever possible), Pelican turns out to be both a good match and way for me to maintain my webdesign skills. AP University College, 2011 - 2014 ↩"},{"title":"Resources","tags":"pages","url":"https://steviepoppe.github.io/resources/","text":"This page contains links and files that have proven to be particularly useful for myself and might be of use for those with similar interests. I'll update this spot as I encounter more tools or pages I feel are worthy of mention. Useful Links General Anki : Free, opensource, multiplatform (smartphones included) flashcard application with powerful SRS 1 algorithm. Especially vital for language acquisition and probably the single most important tool for efficient memorisation. Language Japanese Rikaisama : a Firefox 2 extension on Rikaichan , a pop-up dictionary and a digital minded Japanese learner's best friend. Rikaisama allows additional audio playback anki integration. I've written a blog on how to do this. Animelon : for all you ‘learn Japanese through Anime' kids out there! Reminiscent of the classic Erin's Challenge videos: watch various popular anime with japanese subtitles in kanji/kana/romaji and a script with integrated dictionary as sidebar. Perfect in combination with rikaisama as well. Waran Jiten : a Japanese-Dutch dictionary courtesy of Leuven University. Has a dutch rikai addon. Tangorin : my favorite online Japanese dictionary, has an excellent Kanji dictionary as well. Sourceforge : contains a wide variety of software developed by fellow Japanese learners. Some, such as Jnovelformatter and Japanese Text Analysis Tool (both which I've discussed here and here ) are particularly noteworthy, others not so much. KULeuven Japanology : the Leuven University Japanology homepage. Sanskrit spokensanskrit : the only decent online Sanskrit dictionary out there. Lexilogos : multilingual web keyboard that beats learning to type devanagari on a latin-script keyboard. Files Anki I use Anki to compliment my other study methods for nearly all my classes. These are a bunch of ankisets I made I feel are stand-alone enough to be useful to new students of these classes as well. Inleiding tot de Europese Literatuur na 1750 Download : Europese Literatuur A full set to accompany the textbook ‘ Literaire Verbeelding 2 ‘ 3 : contains important dates and summaries of all artists and their discussed works (in Dutch), sorted by period (from Romanticism till Postmodernism). Kanji 2 Download : Kanji 2 Kanji Vocab 2 Two sets on the compulsory kanji and vocabulary for kanji/goi classes in the 2nd year of Japanology, as seen in our handbook 4 lessons 1 - 20. They're tagged by chapter and contain respectively strokeorder, radicals, definitions, and different readings for the Kanji set, and example sentences in cloze deletion 5 for vocab, both in recognition and reproduction form. They use the KanjiStrokeOrders 6 font and display hidden hiragana on touch/hover. Spaced Repetition System : a method of studying optimally by repeating items over gradually increasing periods. Cards are calculated to appear shortly before the item slips one's mind. ↩ Chrome users can use Rikaikun instead. ↩ Ghesquiere, R. 2006. Literaire verbeelding 2: een geschiedenis van de Europese literatuur en cultuur vanaf 1750. Leuven: Acco ↩ Japanese for International/Graduate Students vol.5: Kanji and Vocabulary（稲村真理子. 2007. 大学・大学院留学生の日本語. 5(漢字・語彙編) 5(漢字・語彙編). 東京: アルク） ↩ cloze deletion test : an exercise in which one fills in portions of the text left blank, based on the context of the text. ↩ Available for free under a BSD style license at http://www.nihilist.org.uk/ . ↩"},{"title":"Hello World - About This Blog","tags":"technical","url":"https://steviepoppe.github.io/blog/2016/08/hello-world-about-this-blog/","text":"I've been thinking on maintaining a blog for a while now and had already stacked up a pile of writings ready to post. A long summer break allowed me enough free time to sit down and get started on the technicalities; a process a bit more complicated as initially expected but worth it in the long run. This blog serves not as a tutorial on making one with Pelican (I'll get to that eventually), but as a brief log on my reasoning and thought process during creation. Blogplatform Deciding From the outset I tried to steer away from heavy content management systems such as Drupal or WordPress . They're easy to work with and take a lot of work of your hands, but a serverside database means too heavy a load for what's basically a smallscale personal blog, and several unnecessary security risks on top. 1 The tech-hipster in me opted for a DIY approach with full control over both content and design. Static blog framework wise there are several popular options, but as I'm more accustomed to the Python programming language through other applications, I ended up choosing for Pelican over the more widespread Ruby -based Jekyll . An added value of managing my blogs clientside and delivering small sized static pages is the ease of finding an appropriate host (I host my pages on GitHub Pages while serving larger files through Dropbox) and a seamless integration in my Markdown -based writing workflow. 2 Set-up The initial set-up is relatively simple, as installation and basic generation is done through command line, and content written in Markdown , AsciiDoc or reStructuredText 3 gets served as stand-alone pages or articles. There's a wide choice of existing templates , but further customization requires some working knowledge on webdesign as well as, preferably, on basic programming concepts (Pelican templates are created using the python-based Jinja2 , allowing for template logic and inheritance). Needless to say, hosting on GitHub Pages requires knowledge of Git , but that's really not a skill learned in vain as the concept of version control applies well to writing important papers too. Development Getting acquainted with these tools can be time consuming. Luckily Pelican's well documented , and there are plenty of tutorials out there, as well as hundreds of working examples hosted on GitHub available as reference (the backbone of my template is a heavily modified Plumage theme). I prefer a minimalistic layout easy on the eye, and steered clear of unnecessary clutter, but with the advent of visual blogging 4 I figured I'd integrate some graphical elements, such as article banners, as visual content engages the reader more easily. One easily overlooked design problem is ensuring responsive webpages for the ever increasing mobile internet traffic 5 , but with easy support for Sass , or just using Twitter's Bootstrap framework, this comes pretty naturally. Finally, implementing additional features is pretty easy too. There's a wide range of existing plugins for features like searching, minifying assets, table of contents and comments (using the third-party Disqus blog hosting service). Hosting GitHub has allowed free hosting for static personal or projectsites on GitHub Pages for a while now. This boils down to creating a new repository with your username and GitHub url ( steviepoppe.github.io ) and hosting your pages there. I created an additional source branch to host all my sourcefiles, use ghp-import to place my output files in a seperate branch, and force push that to the master branch on GH Pages. pelican content - o output - s publishconf . py && ghp - import output && git push - f origin gh - pages : master I'm doing this manually through command line for now, but there's several automatisation options including using Travis-CI for the more hardcore blogger. Conclusion While further customization requires some technical experience (or at least the proper mindset), I believe the base set-up is easy enough for anyone to learn and allows for more control over your own content and a smoother workflow as you would have relying on big CMS systems. Any extra skills learned will definitely come in use as digital publishing, webdesign and working with Git or other forms of version control become more and more basic skills anyone should possess. In retrospect, Jekyll appears to be an easier option for beginners with it's widespread usage, but both Jekyll and Pelican achieve the same thing, so this is personal choice really. I'll end up writing a full step-by-step beginner's guide on setting up Pelican and hosting on GitHub Pages eventually, but for now I'll post several decent tutorials below. Further reading http://arunrocks.com/moving-blogs-to-pelican/ http://cyrille.rossant.net/pelican-github/ http://duncanlock.net/blog/2013/05/17/how-i-built-this-website-using-pelican-part-1-setup/ http://guizishanren.com/guide-to-set-up-github-page-and-pelican/ Burnett, Brett. 2015. \"Why Did We Migrate from Drupal to Jekyll?\" Text. The BHW Group. https://thebhwgroup.com/blog/jekyll-drupal-wordpress ↩ O'Nolan, John. 2015. \"The Ultimate Guide to Writing & Publishing with Markdown\". Ghost. https://blog.ghost.org/markdown/ ↩ All three are open, lightweight markup languages with a heavy focus on readability through seperation of content and layout layers. ↩ Fanguy, Will. 2016. \"The Amazing Evolution of Visual Storytelling: Blogging, Instagram, Snapchat, and the Future\". Business 2 Community. http://www.business2community.com/trends-news/amazing-evolution-visual-storytelling-blogging-instagram-snapchat-future-01557833 ↩ ‘ the amount of mobile traffic now accounts for more than half of total internet traffic ‘ \"Cisco Visual Networking Index: Global Mobile Data Traffic Forecast Update, 2015–2020 White Paper\". 2016. Cisco. http://www.cisco.com/c/en/us/solutions/collateral/service-provider/visual-networking-index-vni/mobile-white-paper-c11-520862.html ↩"}]}