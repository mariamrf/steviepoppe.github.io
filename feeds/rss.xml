<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Onoreto</title><link>https://steviepoppe.net/</link><description>@Stevie Poppe</description><lastBuildDate>Thu, 08 Sep 2016 00:00:00 +0200</lastBuildDate><item><title>A Quick Guide on Using Anki (effectively) (in an academic context)</title><link>https://steviepoppe.net/blog/2016/09/a-quick-guide-on-using-anki-effectively-in-an-academic-context/</link><description>
&lt;p&gt;Those who know me might accuse me of preaching the memorization tool &lt;strong&gt;Anki&lt;/strong&gt; as the best thing that’s ever happened to studying, and they wouldn’t be that far off. Over the past year I’ve extensively integrated this software in my studies, with (to me personally) remarkable results in both productivity and academic grades. There are however, some pitfalls for the casual user to take heed of, and getting the full benefit of your time requires cultivating a proper mindset. As I mention Anki a great deal on this site, I decided on writing my own &lt;del&gt;&lt;em&gt;short&lt;/em&gt;&lt;/del&gt; guide on setting up and using Anki, as well as describe how I personally integrate it into my studies.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stevie Poppe</dc:creator><pubDate>Wed, 07 Sep 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:steviepoppe.net,2016-09-07:blog/2016/09/a-quick-guide-on-using-anki-effectively-in-an-academic-context/</guid><category>Anki</category><category>Tutorial</category><category>Japanese</category><category>Studying</category></item><item><title>A Quick Guide on Using Anki 2: an efficient vocab mining set-up with Anki and Rikaisama</title><link>https://steviepoppe.net/blog/2016/09/a-quick-guide-on-using-anki-2-an-efficient-vocab-mining-set-up-with-anki-and-rikaisama/</link><description>
&lt;p&gt;&lt;strong&gt;Rikaichan&lt;/strong&gt;, and it’s Chrome variant &lt;strong&gt;Rikaikun&lt;/strong&gt;, have already been widely established as incredibly helpful tools for reading Japanese online. Nevertheless, one major function remained missing still: a seamless integration with Anki for efficient vocabulary mining. A recent extension of the original Rikaichan, aptly named &lt;strong&gt;Rikaisama&lt;/strong&gt; (it’s a &lt;em&gt;pun&lt;/em&gt;!), adds several new features including communication with the Anki API, &lt;em&gt;Sanseido Web Dictionary&lt;/em&gt;‘s J-J dictionary definitions, access to &lt;em&gt;J-Pod101&lt;/em&gt;‘s&lt;sup id="fnref:1"&gt;&lt;/sup&gt; audiofiles, and several more&lt;sup id="fnref:2"&gt;&lt;/sup&gt;. Concretely, this means audio playback of tens of thousands of words and expressions as well as easy integration of new vocab into Anki. Despite these incredibly useful features, Rikaisama remains fairly unknown and unblogged about. To counter that, this blog serves as a brief tutorial on setting up a Rikaisama/Anki environment as well as demonstrating some useful real-life appliances.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stevie Poppe</dc:creator><pubDate>Thu, 08 Sep 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:steviepoppe.net,2016-09-08:blog/2016/09/a-quick-guide-on-using-anki-2-an-efficient-vocab-mining-set-up-with-anki-and-rikaisama/</guid><category>Anki</category><category>Rikaisama</category><category>Tutorial</category><category>Japanese</category><category>Studying</category></item><item><title>Parsing Japanese Text in Markdown-Python for Stylizing and Semantic Purposes</title><link>https://steviepoppe.net/blog/2016/09/parsing-japanese-text-in-markdown-python-for-stylizing-and-semantic-purposes/</link><description>
&lt;p&gt;Due to my studies I (will) often use Japanese in my blog. As I gave some thought to typography and readability, I found the default appearance of Japanese text to be in stark contrast with the rest of my design.&lt;sup id="fnref:1"&gt;&lt;/sup&gt; To target specifically Japanese text, I wrote a small Markdown-Python extension for use in static blog generators as Jekyll and Pelican (or pretty much anything that utilizes Markdown-Python to parse Markdown in HTML) and embed such text in a span with the language attribute set to Japanese. The added, and probably more important bonus, aside from styling and semantic reasons, is that this method counters the negative effects of &lt;a href="https://en.wikipedia.org/wiki/Han_unification"&gt;Han unification&lt;/a&gt; in so-called CJK-languages.&lt;/p&gt;
&lt;h1 id="download"&gt;&lt;a class="toclink" href="#download"&gt;Download&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I’ve added the extension on it’s &lt;a href="https://github.com/steviepoppe/lang_ja_span_markdown"&gt;own repository&lt;/a&gt; on my github for anyone interested, but as it serves it’s purpose for me as-is I have no further interest in maintaining it at the moment.&lt;sup id="fnref:2"&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h1 id="installation"&gt;&lt;a class="toclink" href="#installation"&gt;Installation&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Copy the &lt;code&gt;japanese.py&lt;/code&gt; script into your python-markdown extension directory.&lt;/p&gt;
&lt;p&gt;If you’re using &lt;a href="http://docs.getpelican.com/en/latest/"&gt;Pelican&lt;/a&gt; as static site generator, open your project’s &lt;code&gt;pelicanconf.py&lt;/code&gt; and add &lt;code&gt;'japanese'&lt;/code&gt; to the &lt;code&gt;MD_EXTENSIONS&lt;/code&gt; list:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'japanese'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="usage"&gt;&lt;a class="toclink" href="#usage"&gt;Usage&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Using a simple regular expression &lt;code&gt;(\{\{)(.+?)(\}\})&lt;/code&gt;, the extension treats double {} brackets as span tags with a &lt;code&gt;lang="ja"&lt;/code&gt; attribute. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="err"&gt;読書クラブ&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will output&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ja"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;読書クラブ&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Example 1&lt;/strong&gt; (fonts): just compare &lt;span style="font-size: 135%;"&gt;&lt;span lang="ja"&gt;&lt;ruby&gt;&lt;rb&gt;読&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;どく&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;ruby&gt;&lt;rb&gt;書&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;しょ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;クラブ&lt;/span&gt;&lt;/span&gt; (custom) to &lt;span style="font-size: 130%;"&gt;&lt;ruby&gt;&lt;rb&gt;読&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;どく&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;ruby&gt;&lt;rb&gt;書&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;しょ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;クラブ&lt;/span&gt; (Meiryo) to &lt;span style='font-size: 130%; font-family: "MS Gothic";'&gt;&lt;ruby&gt;&lt;rb&gt;読&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;どく&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;ruby&gt;&lt;rb&gt;書&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;しょ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;クラブ&lt;/span&gt; (MS Gothic default).&lt;sup id="fnref:3"&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt; (unihan): compare the Chinese to Japanese characters: &lt;span lang="zh" style="font-size: 130%; font-family: 'Quicksand',sans-serif;"&gt;隆&lt;/span&gt; (&lt;span lang="ja" style="font-size: 135%;"&gt;隆&lt;/span&gt;), &lt;span lang="zh" style="font-size: 130%; font-family: 'Quicksand',sans-serif;"&gt;誤&lt;/span&gt; (&lt;span lang="ja" style="font-size: 135%;"&gt;誤&lt;/span&gt;), &lt;span lang="zh" style="font-size: 130%; font-family: 'Quicksand',sans-serif;"&gt;直&lt;/span&gt; (&lt;span lang="ja" style="font-size: 135%;"&gt;直&lt;/span&gt;).&lt;sup id="fnref:4"&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h1 id="styling"&gt;&lt;a class="toclink" href="#styling"&gt;Styling&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Although it’s a bit of a risk performance-wise, I’m quite a fan of Google’s free webfonts.&lt;sup id="fnref:5"&gt;&lt;/sup&gt; Due the complexity of the Japanese character-set, development on these have been slow&lt;sup id="fnref:6"&gt;&lt;/sup&gt;, but &lt;a href="https://en.wikipedia.org/wiki/Noto_fonts"&gt;Google’s Noto Font&lt;/a&gt; is getting quite performant and with the Japanese font set supporting near 7000 characters, it should pose no problem for most webprojects. Since it works better, typography-wise, with the rest of my fonts, I use this one over fonts as Meiryo that’re more widespread across all platforms.&lt;/p&gt;
&lt;p&gt;Using the CSS below, I ensure max compatibility by using Meiryo and others as fallback if the page can’t connect to Google’s font API.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;fonts&lt;/span&gt;&lt;span class="nc"&gt;.googleapis.com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;earlyaccess&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;notosansjapanese&lt;/span&gt;&lt;span class="nc"&gt;.css&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ja"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Noto Sans Japanese"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"メイリオ"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"Meiryo"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"ヒラギノ角ゴ Pro W3"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"Hiragino Kaku Gothic Pro"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"ＭＳ Ｐゴシック ...&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stevie Poppe</dc:creator><pubDate>Tue, 06 Sep 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:steviepoppe.net,2016-09-06:blog/2016/09/parsing-japanese-text-in-markdown-python-for-stylizing-and-semantic-purposes/</guid><category>python</category><category>pelican</category><category>markdown</category><category>Japanese</category><category>fonts</category></item><item><title>Visiting a Japanese Elementary School - An (Awkward) Experience to Remember</title><link>https://steviepoppe.net/blog/2016/08/visiting-a-japanese-elementary-school-an-awkward-experience-to-remember/</link><description>
&lt;p&gt;Earlier this year I, alongside several other second year Japanology students, participated in a small “tell an interesting story” speech contest through our university. This week we were informed the videorecordings of these had been uploaded on the contest’s website and were available for all to watch&lt;sup id="fnref:1"&gt;&lt;/sup&gt;. My story is a classic “awkward Japanese language mix-up” anecdote on a visit to a Japanese elementary school in Brussels, which I’ll touch upon in this post, along embedding the video. (&lt;span lang="ja"&gt;日本の方、あまりよくないんですけど、もしよかったら見てみてくださいね！&lt;/span&gt;)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stevie Poppe</dc:creator><pubDate>Sun, 28 Aug 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:steviepoppe.net,2016-08-28:blog/2016/08/visiting-a-japanese-elementary-school-an-awkward-experience-to-remember/</guid><category>Japanese</category><category>Video</category><category>KULeuven</category></item><item><title>Pelican Plugin: CSS-only footnote pop-up</title><link>https://steviepoppe.net/blog/2016/08/pelican-plugin-css-only-footnote-pop-up/</link><description>
&lt;p&gt;Footnotes are a classic staple in any writer’s toolbox and allows them to, in an unobtrusive way, citate sources or display additional information not directly related to the original argument. Yet I feel online footnotes, through the way they’re often implemented imitating printed media footnotes, come over quite counterintuitive by forcing the interested reader to disrupt his reading flow, and by failing to make use of today’s extensive webdesign posibilities.&lt;/p&gt;
&lt;p&gt;As I royally use footnotes in my markdown writing workflow&lt;sup id="fnref:1"&gt;&lt;/sup&gt; I figured I’d get acquainted with the Pelican documentation a bit and write a small unobtrusive CSS pop-up plugin to display these on hover for those devices that support it.&lt;sup id="fnref:2"&gt;&lt;/sup&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stevie Poppe</dc:creator><pubDate>Thu, 25 Aug 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:steviepoppe.net,2016-08-25:blog/2016/08/pelican-plugin-css-only-footnote-pop-up/</guid><category>Pelican</category><category>Markdown</category><category>Python</category><category>Footnotes</category></item><item><title>Hello World - About This Blog</title><link>https://steviepoppe.net/blog/2016/08/hello-world-about-this-blog/</link><description>
&lt;p&gt;I’ve been thinking on maintaining a blog for a while now and had already stacked up a pile of writings ready to post. A long summer break allowed me enough free time to sit down and get started on the technicalities; a process a bit more complicated as initially expected but worth it in the long run. This blog serves not as a tutorial on making one with Pelican (I’ll get to that eventually), but as a brief log on my reasoning and thought process during creation.&lt;/p&gt;
&lt;h1 id="blogplatform"&gt;&lt;a class="toclink" href="#blogplatform"&gt;Blogplatform&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="deciding"&gt;&lt;a class="toclink" href="#deciding"&gt;Deciding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the outset I tried to steer away from heavy content management systems such as &lt;strong&gt;Drupal&lt;/strong&gt; or &lt;strong&gt;WordPress&lt;/strong&gt;. They’re easy to work with and take a lot of work of your hands, but a serverside database means too heavy a load for what’s basically a smallscale personal blog, and several unnecessary security risks on top.&lt;sup id="fnref:1"&gt;&lt;/sup&gt; The tech-hipster in me opted for a DIY approach with full control over both content and design. Static blog framework wise there are several popular options, but as I’m more accustomed to the &lt;em&gt;Python&lt;/em&gt; programming language through other applications, I ended up choosing for &lt;strong&gt;&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;&lt;/strong&gt; over the more widespread &lt;em&gt;Ruby&lt;/em&gt;-based &lt;strong&gt;&lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;&lt;/strong&gt;. An added value of managing my blogs clientside and delivering small sized static pages is the ease of finding an appropriate host (I host my pages on &lt;strong&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;&lt;/strong&gt; while serving larger files through Dropbox) and a seamless integration in my &lt;em&gt;Markdown&lt;/em&gt;-based writing workflow.&lt;sup id="fnref:2"&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="set-up"&gt;&lt;a class="toclink" href="#set-up"&gt;Set-up&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The initial set-up is relatively simple, as installation and basic generation is done through command line, and content written in &lt;em&gt;Markdown&lt;/em&gt;, &lt;em&gt;AsciiDoc&lt;/em&gt; or &lt;em&gt;reStructuredText&lt;/em&gt;&lt;sup id="fnref:3"&gt;&lt;/sup&gt; gets served as stand-alone pages or articles. There’s a wide choice of &lt;a href="http://www.pelicanthemes.com/"&gt;existing templates&lt;/a&gt;, but further customization requires some working knowledge on webdesign as well as, preferably, on basic programming concepts (Pelican templates are created using the python-based &lt;strong&gt;&lt;a href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;&lt;/strong&gt;, allowing for template logic and inheritance). Needless to say, hosting on GitHub Pages requires knowledge of &lt;strong&gt;Git&lt;/strong&gt;, but that’s really not a skill learned in vain as the concept of version control applies well to writing important papers too.&lt;/p&gt;
&lt;h2 id="development"&gt;&lt;a class="toclink" href="#development"&gt;Development&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting acquainted with these tools can be time consuming. Luckily Pelican’s &lt;a href="http://docs.getpelican.com/en/3.6.3/#"&gt;well documented&lt;/a&gt;, and there are plenty of tutorials out there, as well as hundreds of working examples hosted on GitHub available as reference (the backbone of my template is a heavily modified &lt;em&gt;&lt;a href="https://github.com/kdeldycke/plumage"&gt;Plumage ...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stevie Poppe</dc:creator><pubDate>Tue, 23 Aug 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:steviepoppe.net,2016-08-23:blog/2016/08/hello-world-about-this-blog/</guid><category>pelican</category><category>blog</category><category>github</category></item></channel></rss>